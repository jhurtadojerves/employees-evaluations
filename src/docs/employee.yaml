components:
  schemas:
    Employee:
      type: object
      properties:
        _id:
          type: string
          description: Employee ID
          example: 6623f0f8ec29a7e7f3c42e8d
        name:
          type: string
          description: Employee name
          example: John Doe
        position:
          type: string
          description: Employee position
          example: Software Engineer
        salary:
          type: number
          description: Employee salary
          example: 55000
        user:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
          description: Employee creation date
          example: '2024-04-22T18:36:22.123Z'
        updatedAt:
          type: string
          format: date-time
          description: Employee last update date
          example: '2024-04-22T18:36:22.123Z'
      required:
        - name
        - position
        - salary
        - user

paths:
  /employees:
    get:
      summary: List all employees
      tags:
        - Employees
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of employees to return
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Number of employees to skip
      responses:
        200:
          description: List of employees
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Employee'

    post:
      summary: Create a new employee
      tags:
        - Employees
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                position:
                  type: string
                  example: Software Engineer
                salary:
                  type: number
                  example: 55000
                email:
                  type: string
                  example: john@example.com
              required:
                - name
                - position
                - salary
                - email
      responses:
        201:
          description: Employee created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        400:
          description: Invalid input or user not found

  /employees/{id}:
    get:
      summary: Get an employee by ID
      tags:
        - Employees
      parameters:
        - name: id
          in: path
          description: Employee ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: Employee found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        404:
          description: Employee not found

    put:
      summary: Update an employee
      tags:
        - Employees
      parameters:
        - name: id
          in: path
          description: Employee ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Jane Doe
                position:
                  type: string
                  example: Product Manager
                salary:
                  type: number
                  example: 75000
              required:
                - name
                - position
                - salary
      responses:
        200:
          description: Employee updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        404:
          description: Employee not found
